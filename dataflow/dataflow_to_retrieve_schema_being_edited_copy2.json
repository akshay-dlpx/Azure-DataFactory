{
	"name": "dataflow_to_retrieve_schema_being_edited_copy2",
	"properties": {
		"folder": {
			"name": "Ankit"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "connect_to_source_schema",
						"type": "DatasetReference"
					},
					"name": "input"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dynamic_output_dataset",
						"type": "DatasetReference"
					},
					"name": "Target"
				}
			],
			"transformations": [
				{
					"name": "AddRowCount"
				},
				{
					"name": "RevColumnOrder"
				},
				{
					"name": "SelectFirstRow"
				},
				{
					"name": "RemoveRowCountColumn"
				},
				{
					"name": "AddModifiedFilename"
				},
				{
					"name": "RemoveFilenameColumn"
				},
				{
					"name": "ChangeColumnSeq"
				},
				{
					"name": "ConcatenateColumnValues"
				},
				{
					"name": "CopyDerivedColumns"
				},
				{
					"name": "ConvertColumnValuetoArray"
				},
				{
					"name": "flattenArray"
				},
				{
					"name": "AddRowCountOne"
				},
				{
					"name": "RemoveFileNameRow"
				},
				{
					"name": "RemoveRCountColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'Filename') ~> input",
				"input keyGenerate(output(row_count as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddRowCount",
				"AddRowCount select(mapColumn(",
				"          Filename,",
				"          row_count,",
				"          each(match(lower(name)!=\"null\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RevColumnOrder",
				"RevColumnOrder split(row_count ==1,",
				"     disjoint: false) ~> SelectFirstRow@(FirstRowOutput, RemainingRowsOutput)",
				"SelectFirstRow@FirstRowOutput select(mapColumn(",
				"          each(match(name!='row_count'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveRowCountColumn",
				"RemoveRowCountColumn derive(Modified_Filename = replace(Filename,'/','')) ~> AddModifiedFilename",
				"AddModifiedFilename select(mapColumn(",
				"          each(match(name!='Filename'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveFilenameColumn",
				"RemoveFilenameColumn select(mapColumn(",
				"          Modified_Filename,",
				"          each(match(lower(name)!=\"null\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ChangeColumnSeq",
				"ChangeColumnSeq derive(ABC = concatWS(',',toString(columns()))) ~> ConcatenateColumnValues",
				"ConcatenateColumnValues select(mapColumn(",
				"          Modified_Filename,",
				"          ABC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CopyDerivedColumns",
				"CopyDerivedColumns derive(ABC = split(ABC,',')) ~> ConvertColumnValuetoArray",
				"ConvertColumnValuetoArray foldDown(unroll(ABC),",
				"     mapColumn(",
				"          Modified_Filename,",
				"          ABC",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenArray",
				"flattenArray keyGenerate(output(Rcount1 as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddRowCountOne",
				"AddRowCountOne filter(Rcount1!=1) ~> RemoveFileNameRow",
				"RemoveFileNameRow select(mapColumn(",
				"          ABC,",
				"          {$$} = Modified_Filename",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveRCountColumn",
				"RemoveRCountColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowUrlColumn:'$$',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Target"
			]
		}
	}
}